{"ast":null,"code":"var _jsxFileName = \"H:\\\\Documents\\\\WEB DEV\\\\REACT\\\\magic-memory\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Card from './components/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/helmet-1.png\"\n}, {\n  \"src\": \"/img/potion-1.png\"\n}, {\n  \"src\": \"/img/ring-1.png\"\n}, {\n  \"src\": \"/img/scroll-1.png\"\n}, {\n  \"src\": \"/img/shield-1.png\"\n}, {\n  \"src\": \"/img/sword-1.png\"\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null); //handles the choice for card component\n\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  }; //compare 2 selected Cards\n\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      console.log(choiceOne.src === choiceTwo.src);\n      resetTurns();\n    }\n  }, [choiceOne, choiceTwo]); //reset choices and increase turn\n\n  const resetTurns = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => {\n      prevTurns + 1;\n    });\n  }; //shuffle cards\n\n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Magic Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        handleChoice: handleChoice\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 30\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/JnteANCPxCZNpFpO1ZAWIjzFcc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["H:/Documents/WEB DEV/REACT/magic-memory/src/App.js"],"names":["useEffect","useState","Card","cardImages","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","handleChoice","card","console","log","src","resetTurns","prevTurns","shuffleCards","shuffledCards","sort","Math","random","map","id"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;AAEA,MAAMC,UAAU,GAAG,CACjB;AAAC,SAAO;AAAR,CADiB,EAEjB;AAAC,SAAO;AAAR,CAFiB,EAGjB;AAAC,SAAO;AAAR,CAHiB,EAIjB;AAAC,SAAO;AAAR,CAJiB,EAKjB;AAAC,SAAO;AAAR,CALiB,EAMjB;AAAC,SAAO;AAAR,CANiB,CAAnB;;AASA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C,CALa,CAOb;;AACA,QAAMY,YAAY,GAAIC,IAAD,IAAU;AAC7BL,IAAAA,SAAS,GAAGG,YAAY,CAACE,IAAD,CAAf,GAAwBJ,YAAY,CAACI,IAAD,CAA7C;AAGD,GAJD,CARa,CAcb;;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGS,SAAS,IAAIE,SAAhB,EAA0B;AACxBI,MAAAA,OAAO,CAACC,GAAR,CAAYP,SAAS,CAACQ,GAAV,KAAkBN,SAAS,CAACM,GAAxC;AACAC,MAAAA,UAAU;AACX;AACF,GALQ,EAKN,CAACT,SAAD,EAAYE,SAAZ,CALM,CAAT,CAfa,CAsBb;;AACA,QAAMO,UAAU,GAAG,MAAM;AACvBR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,IAAAA,QAAQ,CAACW,SAAS,IAAI;AAEpBA,MAAAA,SAAS,GAAG,CAAZ;AAAc,KAFR,CAAR;AAGD,GAND,CAvBa,CA+Bb;;;AACA,QAAMC,YAAY,GAAG,MAAM;AACzB,UAAMC,aAAa,GAAG,CAAC,GAAGlB,UAAJ,EAAgB,GAAGA,UAAnB,EACrBmB,IADqB,CAChB,MAAMC,IAAI,CAACC,MAAL,KAAgB,GADN,EAErBC,GAFqB,CAEhBX,IAAD,KAAW,EAAC,GAAGA,IAAJ;AAAUY,MAAAA,EAAE,EAACH,IAAI,CAACC,MAAL;AAAb,KAAX,CAFiB,CAAtB;AAIAlB,IAAAA,QAAQ,CAACe,aAAD,CAAR;AACAb,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACD,GAPD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAIY,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACGf,KAAK,CAACoB,GAAN,CAAWX,IAAD,iBAAU,QAAC,IAAD;AAAsB,QAAA,IAAI,EAAEA,IAA5B;AAAkC,QAAA,YAAY,EAAID;AAAlD,SAAaC,IAAI,CAACY,EAAlB;AAAA;AAAA;AAAA;AAAA,cAApB;AADH;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAlDQtB,G;;KAAAA,G;AAoDT,eAAeA,GAAf","sourcesContent":["import './App.css'\nimport {useEffect, useState} from 'react';\nimport Card from './components/Card';\n\nconst cardImages = [\n  {\"src\": \"/img/helmet-1.png\"},\n  {\"src\": \"/img/potion-1.png\"},\n  {\"src\": \"/img/ring-1.png\"},\n  {\"src\": \"/img/scroll-1.png\"},\n  {\"src\": \"/img/shield-1.png\"},\n  {\"src\": \"/img/sword-1.png\"},\n]\n\nfunction App() {\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n\n  //handles the choice for card component\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n\n    \n  }\n\n  //compare 2 selected Cards\n  useEffect(() => {\n    if(choiceOne && choiceTwo){\n      console.log(choiceOne.src === choiceTwo.src);\n      resetTurns()\n    }\n  }, [choiceOne, choiceTwo])\n\n  //reset choices and increase turn\n  const resetTurns = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => {\n      \n      prevTurns + 1});\n  }\n\n  //shuffle cards\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n    .sort(() => Math.random() - 0.5)\n    .map((card) => ({...card, id:Math.random()}));\n\n    setCards(shuffledCards)\n    setTurns(0);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick = {shuffleCards}>New Game</button>\n      <div className=\"card-grid\">\n        {cards.map((card) => <Card key = {card.id} card={card} handleChoice = {handleChoice} />)}\n      </div>\n    </div>\n  );\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}