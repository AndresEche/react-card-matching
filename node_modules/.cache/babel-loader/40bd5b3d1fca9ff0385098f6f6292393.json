{"ast":null,"code":"var _jsxFileName = \"H:\\\\Documents\\\\WEB DEV\\\\REACT\\\\magic-memory\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport Card from './components/Card'; //creates object of cards with direct src value \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/helmet-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/potion-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/ring-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/scroll-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/shield-1.png\",\n  matched: false\n}, {\n  \"src\": \"/img/sword-1.png\",\n  matched: false\n}];\n\nfunction App() {\n  _s();\n\n  //useState values to change in future code\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null); //handles setting the card choices\n\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  }; //compare 2 selected Cards. useEffect used due to negate synchronize functionality\n\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      //if selected cards matched we take most current value of card and return a new\n      //set of the same cards except this card has a value of matched\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return { ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurns();\n      } else {\n        resetTurns();\n      }\n    } //dependant on choiceOne or choiceTwo changing in value\n\n  }, [choiceOne, choiceTwo]); //reset choices and increase turn\n\n  const resetTurns = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null); //allows for value of previous turn \n\n    setTurns(prevTurns => prevTurns + 1);\n  }; //shuffle cards\n\n\n  const shuffleCards = () => {\n    //creates spreads 6 objects twice to have an array of 12 objects with half being the same\n    const shuffledCards = [...cardImages, ...cardImages] //for each card object it either switches its place or stays \n    .sort(() => Math.random() - 0.5) //itereates through each card object spreading its contents into a new object with an id\n    .map(card => ({ ...card,\n      id: Math.random()\n    })); //sets new value of cards to the created shuffled cards\n\n    setCards(shuffledCards); //sets turns to zero\n\n    setTurns(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Magic Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        handleChoice: handleChoice,\n        flipped: false\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 30\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/JnteANCPxCZNpFpO1ZAWIjzFcc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["H:/Documents/WEB DEV/REACT/magic-memory/src/App.js"],"names":["useEffect","useState","Card","cardImages","matched","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","handleChoice","card","src","prevCards","map","resetTurns","prevTurns","shuffleCards","shuffledCards","sort","Math","random","id"],"mappings":"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","sourcesContent":["import './App.css'\nimport {useEffect, useState} from 'react';\nimport Card from './components/Card';\n\n//creates object of cards with direct src value \nconst cardImages = [\n  {\"src\": \"/img/helmet-1.png\", matched: false},\n  {\"src\": \"/img/potion-1.png\", matched: false},\n  {\"src\": \"/img/ring-1.png\", matched: false},\n  {\"src\": \"/img/scroll-1.png\", matched: false},\n  {\"src\": \"/img/shield-1.png\", matched: false},\n  {\"src\": \"/img/sword-1.png\", matched: false},\n]\n\nfunction App() {\n\n  //useState values to change in future code\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n\n  //handles setting the card choices\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  }\n\n  //compare 2 selected Cards. useEffect used due to negate synchronize functionality\n  useEffect(() => {\n    if(choiceOne && choiceTwo){\n      //if selected cards matched we take most current value of card and return a new\n      //set of the same cards except this card has a value of matched\n      if(choiceOne.src === choiceTwo.src){\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if(card.src === choiceOne.src){\n              return {...card, matched:true}\n            } else{\n              return card\n            }\n          })\n        })\n        resetTurns()\n      } else {\n        resetTurns()\n      }\n      \n    }\n    //dependant on choiceOne or choiceTwo changing in value\n  }, [choiceOne, choiceTwo])\n\n  //reset choices and increase turn\n  const resetTurns = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    //allows for value of previous turn \n    setTurns(prevTurns => prevTurns + 1);\n  }\n\n  //shuffle cards\n  const shuffleCards = () => {\n    //creates spreads 6 objects twice to have an array of 12 objects with half being the same\n    const shuffledCards = [...cardImages, ...cardImages]\n    //for each card object it either switches its place or stays \n    .sort(() => Math.random() - 0.5)\n    //itereates through each card object spreading its contents into a new object with an id\n    .map((card) => ({...card, id:Math.random()}));\n\n    //sets new value of cards to the created shuffled cards\n    setCards(shuffledCards)\n    //sets turns to zero\n    setTurns(0);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick = {shuffleCards}>New Game</button>\n      <div className=\"card-grid\">\n        {cards.map((card) => <Card \n        key = {card.id} \n        card={card} \n        handleChoice = {handleChoice} \n        flipped = {false}/>)}\n      </div>\n    </div>\n  );\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}